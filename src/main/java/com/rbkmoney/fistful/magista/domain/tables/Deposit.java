/*
 * This file is generated by jOOQ.
 */
package com.rbkmoney.fistful.magista.domain.tables;


import com.rbkmoney.fistful.magista.domain.Indexes;
import com.rbkmoney.fistful.magista.domain.Keys;
import com.rbkmoney.fistful.magista.domain.Mst;
import com.rbkmoney.fistful.magista.domain.enums.DepositEventType;
import com.rbkmoney.fistful.magista.domain.enums.DepositStatus;
import com.rbkmoney.fistful.magista.domain.enums.DepositTransferStatus;
import com.rbkmoney.fistful.magista.domain.tables.records.DepositRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.5"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Deposit extends TableImpl<DepositRecord> {

    private static final long serialVersionUID = -267323421;

    /**
     * The reference instance of <code>mst.deposit</code>
     */
    public static final Deposit DEPOSIT = new Deposit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepositRecord> getRecordType() {
        return DepositRecord.class;
    }

    /**
     * The column <code>mst.deposit.id</code>.
     */
    public final TableField<DepositRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('mst.deposit_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mst.deposit.event_id</code>.
     */
    public final TableField<DepositRecord, Long> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mst.deposit.event_created_at</code>.
     */
    public final TableField<DepositRecord, LocalDateTime> EVENT_CREATED_AT = createField("event_created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>mst.deposit.deposit_id</code>.
     */
    public final TableField<DepositRecord, String> DEPOSIT_ID = createField("deposit_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>mst.deposit.sequence_id</code>.
     */
    public final TableField<DepositRecord, Integer> SEQUENCE_ID = createField("sequence_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mst.deposit.event_occured_at</code>.
     */
    public final TableField<DepositRecord, LocalDateTime> EVENT_OCCURED_AT = createField("event_occured_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>mst.deposit.event_type</code>.
     */
    public final TableField<DepositRecord, DepositEventType> EVENT_TYPE = createField("event_type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.rbkmoney.fistful.magista.domain.enums.DepositEventType.class), this, "");

    /**
     * The column <code>mst.deposit.wallet_id</code>.
     */
    public final TableField<DepositRecord, String> WALLET_ID = createField("wallet_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>mst.deposit.source_id</code>.
     */
    public final TableField<DepositRecord, String> SOURCE_ID = createField("source_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>mst.deposit.amount</code>.
     */
    public final TableField<DepositRecord, Long> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mst.deposit.currency_code</code>.
     */
    public final TableField<DepositRecord, String> CURRENCY_CODE = createField("currency_code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>mst.deposit.deposit_status</code>.
     */
    public final TableField<DepositRecord, DepositStatus> DEPOSIT_STATUS = createField("deposit_status", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.rbkmoney.fistful.magista.domain.enums.DepositStatus.class), this, "");

    /**
     * The column <code>mst.deposit.deposit_transfer_status</code>.
     */
    public final TableField<DepositRecord, DepositTransferStatus> DEPOSIT_TRANSFER_STATUS = createField("deposit_transfer_status", org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(com.rbkmoney.fistful.magista.domain.enums.DepositTransferStatus.class), this, "");

    /**
     * The column <code>mst.deposit.fee</code>.
     */
    public final TableField<DepositRecord, Long> FEE = createField("fee", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>mst.deposit.provider_fee</code>.
     */
    public final TableField<DepositRecord, Long> PROVIDER_FEE = createField("provider_fee", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>mst.deposit.party_id</code>.
     */
    public final TableField<DepositRecord, UUID> PARTY_ID = createField("party_id", org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>mst.deposit.identity_id</code>.
     */
    public final TableField<DepositRecord, String> IDENTITY_ID = createField("identity_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.deposit.wtime</code>.
     */
    public final TableField<DepositRecord, LocalDateTime> WTIME = createField("wtime", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("timezone('utc'::text, now())", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mst.deposit.current</code>.
     */
    public final TableField<DepositRecord, Boolean> CURRENT = createField("current", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>mst.deposit</code> table reference
     */
    public Deposit() {
        this(DSL.name("deposit"), null);
    }

    /**
     * Create an aliased <code>mst.deposit</code> table reference
     */
    public Deposit(String alias) {
        this(DSL.name(alias), DEPOSIT);
    }

    /**
     * Create an aliased <code>mst.deposit</code> table reference
     */
    public Deposit(Name alias) {
        this(alias, DEPOSIT);
    }

    private Deposit(Name alias, Table<DepositRecord> aliased) {
        this(alias, aliased, null);
    }

    private Deposit(Name alias, Table<DepositRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Deposit(Table<O> child, ForeignKey<O, DepositRecord> key) {
        super(child, key, DEPOSIT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mst.MST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEPOSIT_EVENT_CREATED_AT_IDX, Indexes.DEPOSIT_EVENT_ID_IDX, Indexes.DEPOSIT_EVENT_OCCURED_AT_IDX, Indexes.DEPOSIT_ID_IDX, Indexes.DEPOSIT_IDENTITY_ID_IDX, Indexes.DEPOSIT_PARTY_ID_IDX, Indexes.DEPOSIT_PKEY, Indexes.DEPOSIT_WALLET_ID_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DepositRecord, Long> getIdentity() {
        return Keys.IDENTITY_DEPOSIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DepositRecord> getPrimaryKey() {
        return Keys.DEPOSIT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DepositRecord>> getKeys() {
        return Arrays.<UniqueKey<DepositRecord>>asList(Keys.DEPOSIT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Deposit as(String alias) {
        return new Deposit(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Deposit as(Name alias) {
        return new Deposit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Deposit rename(String name) {
        return new Deposit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Deposit rename(Name name) {
        return new Deposit(name, null);
    }
}
