/*
 * This file is generated by jOOQ.
 */
package com.rbkmoney.fistful.magista.domain.tables;


import com.rbkmoney.fistful.magista.domain.Indexes;
import com.rbkmoney.fistful.magista.domain.Keys;
import com.rbkmoney.fistful.magista.domain.Mst;
import com.rbkmoney.fistful.magista.domain.enums.ChallengeEventType;
import com.rbkmoney.fistful.magista.domain.enums.ChallengeResolution;
import com.rbkmoney.fistful.magista.domain.enums.ChallengeStatus;
import com.rbkmoney.fistful.magista.domain.tables.records.ChallengeEventRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.5"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ChallengeEvent extends TableImpl<ChallengeEventRecord> {

    /**
     * The reference instance of <code>mst.challenge_event</code>
     */
    public static final ChallengeEvent CHALLENGE_EVENT = new ChallengeEvent();
    private static final long serialVersionUID = -198675278;
    /**
     * The column <code>mst.challenge_event.id</code>.
     */
    public final TableField<ChallengeEventRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('mst.challenge_event_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");
    /**
     * The column <code>mst.challenge_event.event_id</code>.
     */
    public final TableField<ChallengeEventRecord, Long> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>mst.challenge_event.event_type</code>.
     */
    public final TableField<ChallengeEventRecord, ChallengeEventType> EVENT_TYPE = createField("event_type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.rbkmoney.fistful.magista.domain.enums.ChallengeEventType.class), this, "");
    /**
     * The column <code>mst.challenge_event.event_created_at</code>.
     */
    public final TableField<ChallengeEventRecord, LocalDateTime> EVENT_CREATED_AT = createField("event_created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");
    /**
     * The column <code>mst.challenge_event.event_occured_at</code>.
     */
    public final TableField<ChallengeEventRecord, LocalDateTime> EVENT_OCCURED_AT = createField("event_occured_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");
    /**
     * The column <code>mst.challenge_event.sequence_id</code>.
     */
    public final TableField<ChallengeEventRecord, Integer> SEQUENCE_ID = createField("sequence_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>mst.challenge_event.occured_at</code>.
     */
    public final TableField<ChallengeEventRecord, LocalDateTime> OCCURED_AT = createField("occured_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");
    /**
     * The column <code>mst.challenge_event.identity_id</code>.
     */
    public final TableField<ChallengeEventRecord, String> IDENTITY_ID = createField("identity_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");
    /**
     * The column <code>mst.challenge_event.challenge_id</code>.
     */
    public final TableField<ChallengeEventRecord, String> CHALLENGE_ID = createField("challenge_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");
    /**
     * The column <code>mst.challenge_event.challenge_status</code>.
     */
    public final TableField<ChallengeEventRecord, ChallengeStatus> CHALLENGE_STATUS = createField("challenge_status", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.rbkmoney.fistful.magista.domain.enums.ChallengeStatus.class), this, "");
    /**
     * The column <code>mst.challenge_event.challenge_resolution</code>.
     */
    public final TableField<ChallengeEventRecord, ChallengeResolution> CHALLENGE_RESOLUTION = createField("challenge_resolution", org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(com.rbkmoney.fistful.magista.domain.enums.ChallengeResolution.class), this, "");
    /**
     * The column <code>mst.challenge_event.challenge_valid_until</code>.
     */
    public final TableField<ChallengeEventRecord, LocalDateTime> CHALLENGE_VALID_UNTIL = createField("challenge_valid_until", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>mst.challenge_event</code> table reference
     */
    public ChallengeEvent() {
        this(DSL.name("challenge_event"), null);
    }

    /**
     * Create an aliased <code>mst.challenge_event</code> table reference
     */
    public ChallengeEvent(String alias) {
        this(DSL.name(alias), CHALLENGE_EVENT);
    }

    /**
     * Create an aliased <code>mst.challenge_event</code> table reference
     */
    public ChallengeEvent(Name alias) {
        this(alias, CHALLENGE_EVENT);
    }

    private ChallengeEvent(Name alias, Table<ChallengeEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChallengeEvent(Name alias, Table<ChallengeEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ChallengeEvent(Table<O> child, ForeignKey<O, ChallengeEventRecord> key) {
        super(child, key, CHALLENGE_EVENT);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChallengeEventRecord> getRecordType() {
        return ChallengeEventRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mst.MST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHALLENGE_EVENT_PKEY, Indexes.CHALLENGE_EVENT_UKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ChallengeEventRecord, Long> getIdentity() {
        return Keys.IDENTITY_CHALLENGE_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ChallengeEventRecord> getPrimaryKey() {
        return Keys.CHALLENGE_EVENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ChallengeEventRecord>> getKeys() {
        return Arrays.<UniqueKey<ChallengeEventRecord>>asList(Keys.CHALLENGE_EVENT_PKEY, Keys.CHALLENGE_EVENT_UKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeEvent as(String alias) {
        return new ChallengeEvent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeEvent as(Name alias) {
        return new ChallengeEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChallengeEvent rename(String name) {
        return new ChallengeEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChallengeEvent rename(Name name) {
        return new ChallengeEvent(name, null);
    }
}
