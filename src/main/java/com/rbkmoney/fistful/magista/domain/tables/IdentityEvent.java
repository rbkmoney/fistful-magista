/*
 * This file is generated by jOOQ.
 */
package com.rbkmoney.fistful.magista.domain.tables;


import com.rbkmoney.fistful.magista.domain.Indexes;
import com.rbkmoney.fistful.magista.domain.Keys;
import com.rbkmoney.fistful.magista.domain.Mst;
import com.rbkmoney.fistful.magista.domain.enums.IdentityEventType;
import com.rbkmoney.fistful.magista.domain.tables.records.IdentityEventRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.5"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class IdentityEvent extends TableImpl<IdentityEventRecord> {

    /**
     * The reference instance of <code>mst.identity_event</code>
     */
    public static final IdentityEvent IDENTITY_EVENT = new IdentityEvent();
    private static final long serialVersionUID = -2006305635;
    /**
     * The column <code>mst.identity_event.id</code>.
     */
    public final TableField<IdentityEventRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('mst.identity_event_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");
    /**
     * The column <code>mst.identity_event.event_id</code>.
     */
    public final TableField<IdentityEventRecord, Long> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>mst.identity_event.event_type</code>.
     */
    public final TableField<IdentityEventRecord, IdentityEventType> EVENT_TYPE = createField("event_type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.rbkmoney.fistful.magista.domain.enums.IdentityEventType.class), this, "");
    /**
     * The column <code>mst.identity_event.event_created_at</code>.
     */
    public final TableField<IdentityEventRecord, LocalDateTime> EVENT_CREATED_AT = createField("event_created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");
    /**
     * The column <code>mst.identity_event.event_occured_at</code>.
     */
    public final TableField<IdentityEventRecord, LocalDateTime> EVENT_OCCURED_AT = createField("event_occured_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");
    /**
     * The column <code>mst.identity_event.identity_id</code>.
     */
    public final TableField<IdentityEventRecord, String> IDENTITY_ID = createField("identity_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");
    /**
     * The column <code>mst.identity_event.sequence_id</code>.
     */
    public final TableField<IdentityEventRecord, Integer> SEQUENCE_ID = createField("sequence_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>mst.identity_event.identity_effective_chalenge_id</code>.
     */
    public final TableField<IdentityEventRecord, String> IDENTITY_EFFECTIVE_CHALENGE_ID = createField("identity_effective_chalenge_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>mst.identity_event.identity_level_id</code>.
     */
    public final TableField<IdentityEventRecord, String> IDENTITY_LEVEL_ID = createField("identity_level_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>mst.identity_event</code> table reference
     */
    public IdentityEvent() {
        this(DSL.name("identity_event"), null);
    }

    /**
     * Create an aliased <code>mst.identity_event</code> table reference
     */
    public IdentityEvent(String alias) {
        this(DSL.name(alias), IDENTITY_EVENT);
    }

    /**
     * Create an aliased <code>mst.identity_event</code> table reference
     */
    public IdentityEvent(Name alias) {
        this(alias, IDENTITY_EVENT);
    }

    private IdentityEvent(Name alias, Table<IdentityEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private IdentityEvent(Name alias, Table<IdentityEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> IdentityEvent(Table<O> child, ForeignKey<O, IdentityEventRecord> key) {
        super(child, key, IDENTITY_EVENT);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdentityEventRecord> getRecordType() {
        return IdentityEventRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mst.MST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDENTITY_EVENT_PKEY, Indexes.IDENTITY_EVENT_UKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IdentityEventRecord, Long> getIdentity() {
        return Keys.IDENTITY_IDENTITY_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IdentityEventRecord> getPrimaryKey() {
        return Keys.IDENTITY_EVENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IdentityEventRecord>> getKeys() {
        return Arrays.<UniqueKey<IdentityEventRecord>>asList(Keys.IDENTITY_EVENT_PKEY, Keys.IDENTITY_EVENT_UKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IdentityEvent as(String alias) {
        return new IdentityEvent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IdentityEvent as(Name alias) {
        return new IdentityEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IdentityEvent rename(String name) {
        return new IdentityEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IdentityEvent rename(Name name) {
        return new IdentityEvent(name, null);
    }
}
